<?php
/**
 * Created by PhpStorm.
 * User: pedro
 * Date: 29/03/2019
 * Time: 10:13
 */

namespace app\forms;

use Yii;
use Da\User\Model\User;
use Da\User\Event\FormEvent;
use Da\User\Form\RegistrationForm as BaseForm;
use Da\User\Service\UserCreateService;
use Da\User\Service\UserRegisterService;
use Da\User\Factory\MailFactory;

use app\models\Docente;
use app\models\TituloProfesional;
use app\models\TituloDocente;


class RegistrationForm extends BaseForm {

    private $_user = null;
    private $_docente = null;

    public $primer_nombre = '';
    public $primer_apellido = '';
    public $cedula = '';
    public $telefono = '';

    private $_titulos = [];

    public function __construct(array $config = [])
    {
        parent::__construct($config);

        $this->user = new User();
        $this->_user->loadDefaultValues();
        $this->_docente =  new Docente();
        $this->_docente->loadDefaultValues();
    }

    public function rules()
    {

//        var_dump('rules');die;

//        return [
//            [['User', 'Docente'], 'required'],
//        ];
        $rules = parent::rules();


//        $rules[] = $this->_docente->rules();
//
//        var_dump($rules);die;

        return $rules;
    }


    public function attributeLabels()
    {
        $attributeLabels = parent::attributeLabels();

        $attributeLabels['cedula'] = 'Cédula';
        $attributeLabels['telefono'] = 'Télefono';
        $attributeLabels['titulos'] = 'Títulos';

        return $attributeLabels;
    }

    public function save() {

        $this->_user->setScenario('register');
        $mailService = MailFactory::makeWelcomeMailerService($this->_user);


        if ($this->make(UserRegisterService::class, [$this->_user, $mailService])->run()) {

            $result = $this->saveDocente();
            if ($result['error']) {
                User::deleteAll(['id'=>$this->_user->getId()]);
                $this->addError('error', $result['msg']);
                return false;
            }

            $this->_user = $this->_user;
            return true;
        }
        return false;
    }

    public function validate($attributeNames = null, $clearErrors = true)
    {
        return true;
//        return parent::validate($attributeNames, $clearErrors); // TODO: Change the autogenerated stub
    }

    public function getUser()
    {
        return $this->_user;
    }

    public function setUser($user)
    {
        if ($user instanceof User) {
            $this->_user= $user;
        } else if (is_array($user)) {
            $this->_user->setAttributes($user);
        }
    }

    public function getDocente() {
        return $this->_docente;
    }

    public function setDocente($docente)
    {
        if ($docente instanceof Docente) {
            $this->_docente= $docente;
        } else if (is_array($docente)) {
            $this->_docente->setAttributes($docente);
        }
    }

    private function saveDocente() {
        $result = [
            'error'=>false,
            'msg' => ''
        ];
        if($this->_user == null || $this->_user->isNewRecord) {
            $result['error'] = true;
            $result['msg'] = 'Debe ingresar los datos del usuario.';
            return $result;
        }

        $this->_docente->usuario_id = $this->_user->getId();
        $transaction = \Yii::$app->db->beginTransaction();
        if(!$this->_docente->save()) {
            $result['error'] = true;
            $result['msg'] = $this->_docente->getErrorSummary(true);
            $transaction->rollBack();
            return $result;
        }

        foreach ($this->_titulos as $titulo)
        {
            $tituloDocente = new TituloDocente();
            $tituloDocente->titulo_id = $titulo;
            $tituloDocente->docente_id = $this->_docente->usuario_id;
            if(!$tituloDocente->save())
            {
                $result['error'] = true;
                $result['msg'] = $tituloDocente->getErrorSummary(true);
                $transaction->rollBack();
                return $result;
            }
        }

        $role = Yii::$app->authManager->getRole('Docente');

        if($role)
            Yii::$app->authManager->assign($role, $this->_user->getId());

        $transaction->commit();

        return $result;
    }

    private function getAllModels()
    {
        $models = [
            'User' => $this->user,
            'Docente' => $this->docente,
        ];
        return $models;
    }

    public function setAttributes($data) {
        if(isset($data['User']) && isset($data['Docente']))
        {
            $this->_user->setAttributes($data['User']);
            $this->_docente->setAttributes($data['Docente']);
            $this->_docente->email = $this->user->email;
            $this->_titulos = $data['Docente']['titulodocentes'];

//            var_dump($this->_docente->primer_nombre);
//            var_dump($this->_docente->primer_apellido);
//            var_dump($this->_docente->cedula);
//            var_dump($this->_docente->telefono);
//            var_dump($this->_docente->email);
//            var_dump( $this->_titulos );die;
        }
    }

    public function errorSummary($form)
    {
        $errorLists = [];
        foreach ($this->getAllModels() as $id => $model) {
            $errorList = $form->errorSummary($model, [
                'header' => '<p>Por favor verifique el siguiente error <b>' . $id . '</b></p>',
            ]);
            $errorList = str_replace('<li></li>', '', $errorList); // remove the empty error
            $errorLists[] = $errorList;
        }
        return implode('', $errorLists);
    }

}